<?php
#
# DO NOT EDIT THIS FILE
# ---------------------
# You would lose your changes when you upgrade your site. Use php widgets instead.
#


if (  post_password_required() )
	return;


global $comments_captions;
global $show_pings;

#
# Extract pings
#

$pings = separate_comments($comments);
$coms = $pings['comment'];
$pings = $pings['pings'];


echo '<div id="comments">' . "\n";

#
# Display comments
#
if ( $coms ) {
	semiologic_display_comments( );
} # if $comments


# Display pings
if ( $show_pings  && $pings ) {
	semiologic_display_pings();
}

echo '</div><!-- #comments -->' . "\n";

#
# Display comment form
#

if ( comments_open() && !( isset($_GET['action']) && $_GET['action'] == 'print' ) ) {
	semiologic_display_comment_form();
} # comments_open()


function semiologic_display_comments() {

	global $comments_captions;

    if ( have_comments() ) {
		$title = the_title('', '', false);

		$caption = $comments_captions['comments_on'];
		$caption = sprintf($caption, $title);

		if ( comments_open() && !( isset($_GET['action']) && $_GET['action'] == 'print' ) ) {

			$comment_form_link = ' <span class="comment_entry">'
				. '<a href="#respond" title="' . esc_attr($comments_captions['leave_comment']) . '" class="no_icon">'
				. '<img src="' . sem_url . '/icons/pixel.gif" height="16" width="16" alt="' . esc_attr($comments_captions['leave_comment']) . '" />'
				. '</a>'
				. '</span>';
		}
		else {
			$comment_form_link = false;
		}

		echo '<div class="comments_header">' . "\n"
			. '<h2 class="comments_title">' . $caption . $comment_form_link . '</h2>' . "\n"
			. '</div>' . "\n";

	?>

	<ol class="comment-list">
		<?php
			wp_list_comments( array(
				'type'        => 'comment',
				'style'      => 'ul',
				'avatar_size' => 60,
				'max_depth' => 5,
				'callback' => 'semiologic_display_comments_callback'
			) );
		?>
	</ol><!-- .comment-list -->

	<nav id="comment-nav" class="comment-navigation" role="navigation">
		<div class="nav-previous alignleft"><?php previous_comments_link( __( '&larr; Older Comments', 'sem-pinnacle' ) ); ?></div>
		<div class="nav-next alignright"><?php next_comments_link( __( 'Newer Comments &rarr;', 'sem-pinnacle' ) ); ?></div>
	</nav><!-- #comment-nav -->

<?php } // have_comments() ?>

<?php
	// If comments are closed and there are comments, let's leave a little note, shall we?
	if ( ! comments_open() && '0' != get_comments_number() && post_type_supports( get_post_type(), 'comments' ) ) :
?>
	<p class="no-comments"><?php __( 'Comments are closed.', 'sem-pinnacle' ); ?></p>
<?php endif; ?>

<?php

}

function semiologic_display_comments_callback( $comment, array $args, $depth  ) {

	global $comments_captions;
?>
	<<?php echo 'li'; ?> id="comment-<?php comment_ID(); ?>" <?php comment_class( empty( $args['has_children'] ) ? '' : 'parent' ); ?>>
		<article id="div-comment-<?php comment_ID(); ?>" class="comment-body">
			<footer class="comment-meta">
				<div class="comment-author vcard">
					<?php if ( 0 != $args['avatar_size'] ) echo get_avatar( $comment, $args['avatar_size'] ); ?>
					<?php printf( __( '%s <span class="says">says:</span>', 'sem-pinnacle' ), sprintf( '<b class="fn">%s</b>', get_comment_author_link() ) ); ?>
				</div><!-- .comment-author -->

				<div class="comment-metadata">
					<a href="<?php echo esc_url( get_comment_link( $comment->comment_ID, $args ) ); ?>">
						<time datetime="<?php comment_time( 'c' ); ?>">
							<?php printf( _x( '%1$s at %2$s', '1: date, 2: time', 'sem-pinnacle' ), get_comment_date(), get_comment_time() ); ?>
						</time>
					</a>

					<div class="comment-actions">
						<?php edit_comment_link( __( 'Edit', 'sem-pinnacle' ), '<span class="edit-link">', '</span>' ); ?>

						<div class="reply reply_comment">
							<?php comment_reply_link(
								array_merge( $args, array(
										'add_below' => 'div-comment',
										'depth' => $depth,
										'max_depth' => $args['max_depth'],
										'reply_text' => $comments_captions['reply_link'],
								) ) ); ?>
						</div><!-- .reply -->
					</div><!-- .comment_actions -->
				</div><!-- .comment-metadata -->

				<?php if ( '0' == $comment->comment_approved ) : ?>
				<p class="comment-awaiting-moderation"><?php __( 'Your comment is awaiting moderation.', 'sem-pinnacle' ); ?></p>
				<?php endif; ?>
			</footer><!-- .comment-meta -->

			<div class="comment-content">
				<?php comment_text(); ?>
			</div><!-- .comment-content -->
		</article><!-- .comment-body -->
<?php
}

function semiologic_display_pings( ) {

	global $comments_captions;

//	$title = the_title('', '', false);

	$caption = $comments_captions['pings_on'];
//	$caption = sprintf($caption, $title);

	echo '<div class="pings_header">' . "\n"
		. '<h2>' . $caption . '</h2>' . "\n"
		. '</div>' . "\n";


	echo '<ol class="pings_list">' . "\n";

	$args = array(
		'style' => 'ul',
		'type' => 'pings',
	);

	wp_list_comments( $args );

	echo '</ol> <!-- pings_list -->' . "\n";
}

/**
 * semiologic_pings_callback()
 *
 * Comment callback for pings
 *
 * @param stdClass $comment Comment object.
 * @param array    $args    Comment args.
 * @param integer  $depth   Depth of current comment.
 */
function semiologic_pings_callback( $comment, array $args, $depth ) {

	echo '<li id="comment-' . get_comment_ID() . '" ';
		comment_class();
		echo '<p>';
        comment_author_link();
		echo edit_comment_link( __( '(Edit)', 'sem-pinnacle' ), '<span class="edit-link">', '</span>' )
        . '</p>'
		. '</li>' . "\n";
}


function semiologic_display_comment_form() {

	add_filter( 'comment_form_defaults', 'semiologic_comment_form_args' );
	add_filter( 'comment_form_after_fields', 'semiologic_comment_form_after_fields' );
	add_filter( 'comment_form_after', 'semiologic_comment_form_after' );
	add_filter( 'comment_form_top', 'semiologic_comment_form_top' );
	add_filter( 'comment_form_field_comment', 'semiologic_comment_field' );

	comment_form();
	return;
}


function semiologic_comment_form_args( array $defaults ) {

	global $comments_captions;
	global $req;
	global $post_id;
	global $user_identity;

	$commenter = wp_get_current_commenter();
	$req       = get_option( 'require_name_email' );
	$aria_req  = ( $req ? ' aria-required="true"' : '' );


	$cancel_reply = '<span class="cancel_comment_reply">'
		. __('Click here to cancel reply.', 'sem-pinnacle')
		. '</span>';

	$login_url = '<span class="login">'
		. apply_filters('loginout',
			'<a href="' . esc_url(wp_login_url(apply_filters('the_permalink', get_permalink( $post_id )))) . '">' . __('Login', 'sem-pinnacle') . '</a>'
			)
		. '</span>';

	$must_log_in = '<p class="must-log-in">'
		. sprintf($comments_captions['login_required'], $login_url)
		. '</p>' . "\n";


	$logout_url = '<span class="logout">'
		. apply_filters('loginout',
			'<a href="' . esc_url(wp_logout_url(apply_filters('the_permalink', get_permalink( $post_id )))) . '">' . __('Logout', 'sem-pinnacle') . '</a>'
			)
		. '</span>';

	$identity = '<span class="signed_in_author">'
		. '<a href="' . trailingslashit(site_url()) . 'wp-admin/profile.php">'
		. $user_identity
		. '</a>'
		. '</span>';

	$logged_in_as = '<p class="logged-in-as">'
		. sprintf($comments_captions['logged_in_as'], $identity, $logout_url)
		. '</p>' . "\n";


	$author = '<p class="comment_label name_label">' .
				'<label for="author">' . $comments_captions['name_field']
					. ( $req
						? ' (*)'
						: ''
						) .
					'</label>' .
					'</p>' .
		        '<p class="comment-form-author comment_field name_field">' .
	            '<input id="author" name="author" type="text" value="' . esc_attr( $commenter['comment_author'] ) . '" size="30" tabindex="1"' . $aria_req . ' />' .
	            '</p>';

	$email = '<p class="comment_label email_label">' .
				'<label for="email">' . $comments_captions['email_field']
				. ( $req
					? ' (*)'
					: ''
					) .
				'</label>' .
				'</p>' .
			'<p class="comment-form-email comment_field email_field">' .
            '<input id="email" name="email" type="text" value="' . esc_attr( $commenter['comment_author_email'] ) . '" size="30" tabindex="2"' . $aria_req . ' />' .
            '</p>';

	$url =  '<p class="comment_label url_label">' .
			'<label for="url">' . $comments_captions['url_field'] . '</label>' .
			'</p>' .
			'<p class="comment-form-url comment_field url_field">' .
	        '<input id="url" name="url" type="text" value="' . esc_attr( $commenter['comment_author_url'] ) . '" size="30" tabindex="3" />' .
	        '</p>';

	$comment_field = '<p class="comment-form-comment">' .
	                 '<textarea id="comment" name="comment" cols="48" rows="10" tabindex="4" aria-required="true"></textarea>' .
	                 '</p>';

	$args = array(
		'comment_field'        => $comment_field,
		'title_reply'          => $comments_captions['leave_comment'],
		'comment_notes_before' => '',
		'comment_notes_after'  => '',
//		'comment_notes_before' => '<p class="comment-notes">' . __( 'Your email address will not be published.', 'sem-pinnacle' ) . '</p>',
//		'comment_notes_after'  => '<p class="form-allowed-tags">' . sprintf( __( 'You may use these <abbr title="HyperText Markup Language">HTML</abbr> tags and attributes: %s', 'sem-pinnacle' ), ' <code>' . allowed_tags() . '</code>' ) . '</p>',
		'must_log_in'          => $must_log_in,
		'logged_in_as'         => $logged_in_as,
		'cancel_reply_link'    => $cancel_reply,
		'fields'               => array(
			'author' => $author,
			'email'  => $email,
			'url'    => $url,
		),
		'label_submit' => esc_attr($comments_captions['submit_field']),
		'format'               => 'html5',
	);

	//* Merge $args with $defaults
	$args = wp_parse_args( $args, $defaults );

	return $args;
}

function semiologic_comment_form_top() {

	global $comments_captions;

	if ( $comments_captions['policy'] )
		echo apply_filters('widget_text', wpautop($comments_captions['policy']));
}

function semiologic_comment_form_after_fields() {

	global $comments_captions;
	global $req;

	if ( !is_user_logged_in() && $req ) {
		echo '<p>'
			.  $comments_captions['required_fields']
			. '</p>' . "\n";
	}
}

function semiologic_comment_field( $comment ) {

	# Subscribe to comments
	if ( function_exists('show_subscription_checkbox') && has_filter('comment_form', 'show_subscription_checkbox') ) {
		remove_action('comment_form', 'show_subscription_checkbox');
		show_subscription_checkbox();
	}

	return $comment;
}

function semiologic_comment_form_after() {
	if ( function_exists('show_manual_subscription_form') ) {
		show_manual_subscription_form();
	}
}